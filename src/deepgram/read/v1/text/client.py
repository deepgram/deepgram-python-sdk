# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....requests.read_v1request import ReadV1RequestParams
from ....types.read_v1response import ReadV1Response
from .raw_client import AsyncRawTextClient, RawTextClient
from .types.text_analyze_request_callback_method import TextAnalyzeRequestCallbackMethod
from .types.text_analyze_request_custom_intent_mode import TextAnalyzeRequestCustomIntentMode
from .types.text_analyze_request_custom_topic_mode import TextAnalyzeRequestCustomTopicMode
from .types.text_analyze_request_summarize import TextAnalyzeRequestSummarize

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TextClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTextClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTextClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTextClient
        """
        return self._raw_client

    def analyze(
        self,
        *,
        request: ReadV1RequestParams,
        callback: typing.Optional[str] = None,
        callback_method: typing.Optional[TextAnalyzeRequestCallbackMethod] = None,
        sentiment: typing.Optional[bool] = None,
        summarize: typing.Optional[TextAnalyzeRequestSummarize] = None,
        tag: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        topics: typing.Optional[bool] = None,
        custom_topic: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_topic_mode: typing.Optional[TextAnalyzeRequestCustomTopicMode] = None,
        intents: typing.Optional[bool] = None,
        custom_intent: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_intent_mode: typing.Optional[TextAnalyzeRequestCustomIntentMode] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReadV1Response:
        """
        Analyze text content using Deepgrams text analysis API

        Parameters
        ----------
        request : ReadV1RequestParams

        callback : typing.Optional[str]
            URL to which we'll make the callback request

        callback_method : typing.Optional[TextAnalyzeRequestCallbackMethod]
            HTTP method by which the callback request will be made

        sentiment : typing.Optional[bool]
            Recognizes the sentiment throughout a transcript or text

        summarize : typing.Optional[TextAnalyzeRequestSummarize]
            Summarize content. For Listen API, supports string version option. For Read API, accepts boolean only.

        tag : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Label your requests for the purpose of identification during usage reporting

        topics : typing.Optional[bool]
            Detect topics throughout a transcript or text

        custom_topic : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom topics you want the model to detect within your input audio or text if present Submit up to `100`.

        custom_topic_mode : typing.Optional[TextAnalyzeRequestCustomTopicMode]
            Sets how the model will interpret strings submitted to the `custom_topic` param. When `strict`, the model will only return topics submitted using the `custom_topic` param. When `extended`, the model will return its own detected topics in addition to those submitted using the `custom_topic` param

        intents : typing.Optional[bool]
            Recognizes speaker intent throughout a transcript or text

        custom_intent : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom intents you want the model to detect within your input audio if present

        custom_intent_mode : typing.Optional[TextAnalyzeRequestCustomIntentMode]
            Sets how the model will interpret intents submitted to the `custom_intent` param. When `strict`, the model will only return intents submitted using the `custom_intent` param. When `extended`, the model will return its own detected intents in the `custom_intent` param.

        language : typing.Optional[str]
            The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model and API endpoint you choose only certain languages are available

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReadV1Response
            Successful text analysis

        Examples
        --------
        from deepgram import DeepgramClient

        client = DeepgramClient(
            api_key="YOUR_API_KEY",
        )
        client.read.v1.text.analyze(
            request={"url": "url"},
        )
        """
        _response = self._raw_client.analyze(
            request=request,
            callback=callback,
            callback_method=callback_method,
            sentiment=sentiment,
            summarize=summarize,
            tag=tag,
            topics=topics,
            custom_topic=custom_topic,
            custom_topic_mode=custom_topic_mode,
            intents=intents,
            custom_intent=custom_intent,
            custom_intent_mode=custom_intent_mode,
            language=language,
            request_options=request_options,
        )
        return _response.data


class AsyncTextClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTextClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTextClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTextClient
        """
        return self._raw_client

    async def analyze(
        self,
        *,
        request: ReadV1RequestParams,
        callback: typing.Optional[str] = None,
        callback_method: typing.Optional[TextAnalyzeRequestCallbackMethod] = None,
        sentiment: typing.Optional[bool] = None,
        summarize: typing.Optional[TextAnalyzeRequestSummarize] = None,
        tag: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        topics: typing.Optional[bool] = None,
        custom_topic: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_topic_mode: typing.Optional[TextAnalyzeRequestCustomTopicMode] = None,
        intents: typing.Optional[bool] = None,
        custom_intent: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_intent_mode: typing.Optional[TextAnalyzeRequestCustomIntentMode] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReadV1Response:
        """
        Analyze text content using Deepgrams text analysis API

        Parameters
        ----------
        request : ReadV1RequestParams

        callback : typing.Optional[str]
            URL to which we'll make the callback request

        callback_method : typing.Optional[TextAnalyzeRequestCallbackMethod]
            HTTP method by which the callback request will be made

        sentiment : typing.Optional[bool]
            Recognizes the sentiment throughout a transcript or text

        summarize : typing.Optional[TextAnalyzeRequestSummarize]
            Summarize content. For Listen API, supports string version option. For Read API, accepts boolean only.

        tag : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Label your requests for the purpose of identification during usage reporting

        topics : typing.Optional[bool]
            Detect topics throughout a transcript or text

        custom_topic : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom topics you want the model to detect within your input audio or text if present Submit up to `100`.

        custom_topic_mode : typing.Optional[TextAnalyzeRequestCustomTopicMode]
            Sets how the model will interpret strings submitted to the `custom_topic` param. When `strict`, the model will only return topics submitted using the `custom_topic` param. When `extended`, the model will return its own detected topics in addition to those submitted using the `custom_topic` param

        intents : typing.Optional[bool]
            Recognizes speaker intent throughout a transcript or text

        custom_intent : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom intents you want the model to detect within your input audio if present

        custom_intent_mode : typing.Optional[TextAnalyzeRequestCustomIntentMode]
            Sets how the model will interpret intents submitted to the `custom_intent` param. When `strict`, the model will only return intents submitted using the `custom_intent` param. When `extended`, the model will return its own detected intents in the `custom_intent` param.

        language : typing.Optional[str]
            The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model and API endpoint you choose only certain languages are available

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReadV1Response
            Successful text analysis

        Examples
        --------
        import asyncio

        from deepgram import AsyncDeepgramClient

        client = AsyncDeepgramClient(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.read.v1.text.analyze(
                request={"url": "url"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.analyze(
            request=request,
            callback=callback,
            callback_method=callback_method,
            sentiment=sentiment,
            summarize=summarize,
            tag=tag,
            topics=topics,
            custom_topic=custom_topic,
            custom_topic_mode=custom_topic_mode,
            intents=intents,
            custom_intent=custom_intent,
            custom_intent_mode=custom_intent_mode,
            language=language,
            request_options=request_options,
        )
        return _response.data
