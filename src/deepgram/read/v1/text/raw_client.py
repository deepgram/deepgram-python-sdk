# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.pydantic_utilities import parse_obj_as
from ....core.request_options import RequestOptions
from ....core.serialization import convert_and_respect_annotation_metadata
from ....errors.bad_request_error import BadRequestError
from ....requests.read_v1request import ReadV1RequestParams
from ....types.error_response import ErrorResponse
from ....types.read_v1response import ReadV1Response
from .types.text_analyze_request_callback_method import TextAnalyzeRequestCallbackMethod
from .types.text_analyze_request_custom_intent_mode import TextAnalyzeRequestCustomIntentMode
from .types.text_analyze_request_custom_topic_mode import TextAnalyzeRequestCustomTopicMode
from .types.text_analyze_request_summarize import TextAnalyzeRequestSummarize

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTextClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def analyze(
        self,
        *,
        request: ReadV1RequestParams,
        callback: typing.Optional[str] = None,
        callback_method: typing.Optional[TextAnalyzeRequestCallbackMethod] = None,
        sentiment: typing.Optional[bool] = None,
        summarize: typing.Optional[TextAnalyzeRequestSummarize] = None,
        topics: typing.Optional[bool] = None,
        custom_topic: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_topic_mode: typing.Optional[TextAnalyzeRequestCustomTopicMode] = None,
        intents: typing.Optional[bool] = None,
        custom_intent: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_intent_mode: typing.Optional[TextAnalyzeRequestCustomIntentMode] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ReadV1Response]:
        """
        Analyze text content using Deepgram's text analysis API

        Parameters
        ----------
        request : ReadV1RequestParams

        callback : typing.Optional[str]
            URL to which we'll make the callback request

        callback_method : typing.Optional[TextAnalyzeRequestCallbackMethod]
            HTTP method by which the callback request will be made

        sentiment : typing.Optional[bool]
            Recognizes the sentiment throughout a transcript or text

        summarize : typing.Optional[TextAnalyzeRequestSummarize]
            Summarize content. For Listen API, supports string version option. For Read API, accepts boolean only.

        topics : typing.Optional[bool]
            Detect topics throughout a transcript or text

        custom_topic : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom topics you want the model to detect within your input audio or text if present Submit up to `100`.

        custom_topic_mode : typing.Optional[TextAnalyzeRequestCustomTopicMode]
            Sets how the model will interpret strings submitted to the `custom_topic` param. When `strict`, the model will only return topics submitted using the `custom_topic` param. When `extended`, the model will return its own detected topics in addition to those submitted using the `custom_topic` param

        intents : typing.Optional[bool]
            Recognizes speaker intent throughout a transcript or text

        custom_intent : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom intents you want the model to detect within your input audio if present

        custom_intent_mode : typing.Optional[TextAnalyzeRequestCustomIntentMode]
            Sets how the model will interpret intents submitted to the `custom_intent` param. When `strict`, the model will only return intents submitted using the `custom_intent` param. When `extended`, the model will return its own detected intents in the `custom_intent` param.

        language : typing.Optional[str]
            The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model and API endpoint you choose only certain languages are available

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ReadV1Response]
            Successful text analysis
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/read",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            params={
                "callback": callback,
                "callback_method": callback_method,
                "sentiment": sentiment,
                "summarize": summarize,
                "topics": topics,
                "custom_topic": custom_topic,
                "custom_topic_mode": custom_topic_mode,
                "intents": intents,
                "custom_intent": custom_intent,
                "custom_intent_mode": custom_intent_mode,
                "language": language,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=ReadV1RequestParams, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ReadV1Response,
                    parse_obj_as(
                        type_=ReadV1Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        parse_obj_as(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawTextClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def analyze(
        self,
        *,
        request: ReadV1RequestParams,
        callback: typing.Optional[str] = None,
        callback_method: typing.Optional[TextAnalyzeRequestCallbackMethod] = None,
        sentiment: typing.Optional[bool] = None,
        summarize: typing.Optional[TextAnalyzeRequestSummarize] = None,
        topics: typing.Optional[bool] = None,
        custom_topic: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_topic_mode: typing.Optional[TextAnalyzeRequestCustomTopicMode] = None,
        intents: typing.Optional[bool] = None,
        custom_intent: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        custom_intent_mode: typing.Optional[TextAnalyzeRequestCustomIntentMode] = None,
        language: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ReadV1Response]:
        """
        Analyze text content using Deepgram's text analysis API

        Parameters
        ----------
        request : ReadV1RequestParams

        callback : typing.Optional[str]
            URL to which we'll make the callback request

        callback_method : typing.Optional[TextAnalyzeRequestCallbackMethod]
            HTTP method by which the callback request will be made

        sentiment : typing.Optional[bool]
            Recognizes the sentiment throughout a transcript or text

        summarize : typing.Optional[TextAnalyzeRequestSummarize]
            Summarize content. For Listen API, supports string version option. For Read API, accepts boolean only.

        topics : typing.Optional[bool]
            Detect topics throughout a transcript or text

        custom_topic : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom topics you want the model to detect within your input audio or text if present Submit up to `100`.

        custom_topic_mode : typing.Optional[TextAnalyzeRequestCustomTopicMode]
            Sets how the model will interpret strings submitted to the `custom_topic` param. When `strict`, the model will only return topics submitted using the `custom_topic` param. When `extended`, the model will return its own detected topics in addition to those submitted using the `custom_topic` param

        intents : typing.Optional[bool]
            Recognizes speaker intent throughout a transcript or text

        custom_intent : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Custom intents you want the model to detect within your input audio if present

        custom_intent_mode : typing.Optional[TextAnalyzeRequestCustomIntentMode]
            Sets how the model will interpret intents submitted to the `custom_intent` param. When `strict`, the model will only return intents submitted using the `custom_intent` param. When `extended`, the model will return its own detected intents in the `custom_intent` param.

        language : typing.Optional[str]
            The [BCP-47 language tag](https://tools.ietf.org/html/bcp47) that hints at the primary spoken language. Depending on the Model and API endpoint you choose only certain languages are available

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ReadV1Response]
            Successful text analysis
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/read",
            base_url=self._client_wrapper.get_environment().base,
            method="POST",
            params={
                "callback": callback,
                "callback_method": callback_method,
                "sentiment": sentiment,
                "summarize": summarize,
                "topics": topics,
                "custom_topic": custom_topic,
                "custom_topic_mode": custom_topic_mode,
                "intents": intents,
                "custom_intent": custom_intent,
                "custom_intent_mode": custom_intent_mode,
                "language": language,
            },
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=ReadV1RequestParams, direction="write"
            ),
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ReadV1Response,
                    parse_obj_as(
                        type_=ReadV1Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        parse_obj_as(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
