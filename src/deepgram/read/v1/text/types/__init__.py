# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .text_analyze_request_callback_method import TextAnalyzeRequestCallbackMethod
    from .text_analyze_request_custom_intent_mode import TextAnalyzeRequestCustomIntentMode
    from .text_analyze_request_custom_topic_mode import TextAnalyzeRequestCustomTopicMode
    from .text_analyze_request_language import TextAnalyzeRequestLanguage
    from .text_analyze_request_summarize import TextAnalyzeRequestSummarize
_dynamic_imports: typing.Dict[str, str] = {
    "TextAnalyzeRequestCallbackMethod": ".text_analyze_request_callback_method",
    "TextAnalyzeRequestCustomIntentMode": ".text_analyze_request_custom_intent_mode",
    "TextAnalyzeRequestCustomTopicMode": ".text_analyze_request_custom_topic_mode",
    "TextAnalyzeRequestLanguage": ".text_analyze_request_language",
    "TextAnalyzeRequestSummarize": ".text_analyze_request_summarize",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "TextAnalyzeRequestCallbackMethod",
    "TextAnalyzeRequestCustomIntentMode",
    "TextAnalyzeRequestCustomTopicMode",
    "TextAnalyzeRequestLanguage",
    "TextAnalyzeRequestSummarize",
]
