# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ......core.api_error import ApiError
from ......core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ......core.http_response import AsyncHttpResponse, HttpResponse
from ......core.jsonable_encoder import jsonable_encoder
from ......core.pydantic_utilities import parse_obj_as
from ......core.request_options import RequestOptions
from ......errors.bad_request_error import BadRequestError
from ......types.billing_breakdown_v1response import BillingBreakdownV1Response
from .types.breakdown_list_request_deployment import BreakdownListRequestDeployment
from .types.breakdown_list_request_grouping_item import BreakdownListRequestGroupingItem


class RawBreakdownClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        project_id: str,
        *,
        start: typing.Optional[str] = None,
        end: typing.Optional[str] = None,
        accessor: typing.Optional[str] = None,
        deployment: typing.Optional[BreakdownListRequestDeployment] = None,
        tag: typing.Optional[str] = None,
        line_item: typing.Optional[str] = None,
        grouping: typing.Optional[
            typing.Union[BreakdownListRequestGroupingItem, typing.Sequence[BreakdownListRequestGroupingItem]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BillingBreakdownV1Response]:
        """
        Retrieves the billing summary for a specific project, with various filter options or by grouping options.

        Parameters
        ----------
        project_id : str
            The unique identifier of the project

        start : typing.Optional[str]
            Start date of the requested date range. Format accepted is YYYY-MM-DD

        end : typing.Optional[str]
            End date of the requested date range. Format accepted is YYYY-MM-DD

        accessor : typing.Optional[str]
            Filter for requests where a specific accessor was used

        deployment : typing.Optional[BreakdownListRequestDeployment]
            Filter for requests where a specific deployment was used

        tag : typing.Optional[str]
            Filter for requests where a specific tag was used

        line_item : typing.Optional[str]
            Filter requests by line item (e.g. streaming::nova-3)

        grouping : typing.Optional[typing.Union[BreakdownListRequestGroupingItem, typing.Sequence[BreakdownListRequestGroupingItem]]]
            Group billing breakdown by one or more dimensions (accessor, deployment, line_item, tags)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BillingBreakdownV1Response]
            Billing breakdown response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/projects/{jsonable_encoder(project_id)}/billing/breakdown",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            params={
                "start": start,
                "end": end,
                "accessor": accessor,
                "deployment": deployment,
                "tag": tag,
                "line_item": line_item,
                "grouping": grouping,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BillingBreakdownV1Response,
                    parse_obj_as(
                        type_=BillingBreakdownV1Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawBreakdownClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        project_id: str,
        *,
        start: typing.Optional[str] = None,
        end: typing.Optional[str] = None,
        accessor: typing.Optional[str] = None,
        deployment: typing.Optional[BreakdownListRequestDeployment] = None,
        tag: typing.Optional[str] = None,
        line_item: typing.Optional[str] = None,
        grouping: typing.Optional[
            typing.Union[BreakdownListRequestGroupingItem, typing.Sequence[BreakdownListRequestGroupingItem]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BillingBreakdownV1Response]:
        """
        Retrieves the billing summary for a specific project, with various filter options or by grouping options.

        Parameters
        ----------
        project_id : str
            The unique identifier of the project

        start : typing.Optional[str]
            Start date of the requested date range. Format accepted is YYYY-MM-DD

        end : typing.Optional[str]
            End date of the requested date range. Format accepted is YYYY-MM-DD

        accessor : typing.Optional[str]
            Filter for requests where a specific accessor was used

        deployment : typing.Optional[BreakdownListRequestDeployment]
            Filter for requests where a specific deployment was used

        tag : typing.Optional[str]
            Filter for requests where a specific tag was used

        line_item : typing.Optional[str]
            Filter requests by line item (e.g. streaming::nova-3)

        grouping : typing.Optional[typing.Union[BreakdownListRequestGroupingItem, typing.Sequence[BreakdownListRequestGroupingItem]]]
            Group billing breakdown by one or more dimensions (accessor, deployment, line_item, tags)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BillingBreakdownV1Response]
            Billing breakdown response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/projects/{jsonable_encoder(project_id)}/billing/breakdown",
            base_url=self._client_wrapper.get_environment().base,
            method="GET",
            params={
                "start": start,
                "end": end,
                "accessor": accessor,
                "deployment": deployment,
                "tag": tag,
                "line_item": line_item,
                "grouping": grouping,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BillingBreakdownV1Response,
                    parse_obj_as(
                        type_=BillingBreakdownV1Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
