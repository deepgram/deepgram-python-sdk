# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ....types.create_key_v1request_one import CreateKeyV1RequestOne
from ....types.create_key_v1response import CreateKeyV1Response
from ....types.delete_project_key_v1response import DeleteProjectKeyV1Response
from .raw_client import AsyncRawKeysClient, RawKeysClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class KeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawKeysClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawKeysClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawKeysClient
        """
        return self._raw_client

    def create(
        self,
        project_id: typing.Optional[str],
        *,
        request: CreateKeyV1RequestOne,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateKeyV1Response:
        """
        Creates a new API key with specified settings for the project

        Parameters
        ----------
        project_id : typing.Optional[str]
            The unique identifier of the project

        request : CreateKeyV1RequestOne

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateKeyV1Response
            API key created successfully

        Examples
        --------
        from deepgram import DeepgramClient

        client = DeepgramClient(
            api_key="YOUR_API_KEY",
        )
        client.manage.projects.keys.create(
            project_id=None,
            request={"key": "value"},
        )
        """
        _response = self._raw_client.create(project_id, request=request, request_options=request_options)
        return _response.data

    def delete(
        self,
        project_id: typing.Optional[str],
        key_id: typing.Optional[str],
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteProjectKeyV1Response:
        """
        Deletes an API key for a specific project

        Parameters
        ----------
        project_id : typing.Optional[str]
            The unique identifier of the project

        key_id : typing.Optional[str]
            The unique identifier of the API key

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteProjectKeyV1Response
            API key deleted

        Examples
        --------
        from deepgram import DeepgramClient

        client = DeepgramClient(
            api_key="YOUR_API_KEY",
        )
        client.manage.projects.keys.delete(
            project_id="123456-7890-1234-5678-901234",
            key_id="123456789012345678901234",
        )
        """
        _response = self._raw_client.delete(project_id, key_id, request_options=request_options)
        return _response.data


class AsyncKeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawKeysClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawKeysClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawKeysClient
        """
        return self._raw_client

    async def create(
        self,
        project_id: typing.Optional[str],
        *,
        request: CreateKeyV1RequestOne,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateKeyV1Response:
        """
        Creates a new API key with specified settings for the project

        Parameters
        ----------
        project_id : typing.Optional[str]
            The unique identifier of the project

        request : CreateKeyV1RequestOne

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateKeyV1Response
            API key created successfully

        Examples
        --------
        import asyncio

        from deepgram import AsyncDeepgramClient

        client = AsyncDeepgramClient(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.manage.projects.keys.create(
                project_id=None,
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(project_id, request=request, request_options=request_options)
        return _response.data

    async def delete(
        self,
        project_id: typing.Optional[str],
        key_id: typing.Optional[str],
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteProjectKeyV1Response:
        """
        Deletes an API key for a specific project

        Parameters
        ----------
        project_id : typing.Optional[str]
            The unique identifier of the project

        key_id : typing.Optional[str]
            The unique identifier of the API key

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteProjectKeyV1Response
            API key deleted

        Examples
        --------
        import asyncio

        from deepgram import AsyncDeepgramClient

        client = AsyncDeepgramClient(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.manage.projects.keys.delete(
                project_id="123456-7890-1234-5678-901234",
                key_id="123456789012345678901234",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(project_id, key_id, request_options=request_options)
        return _response.data
