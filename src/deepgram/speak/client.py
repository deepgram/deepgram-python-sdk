# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing
from contextlib import asynccontextmanager, contextmanager

import httpx
import websockets.exceptions
import websockets.sync.client as websockets_sync_client
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawSpeakClient, RawSpeakClient
from .socket_client import AsyncSpeakSocketClient, SpeakSocketClient

if typing.TYPE_CHECKING:
    from .v1.client import AsyncV1Client, V1Client

try:
    from websockets.legacy.client import connect as websockets_client_connect  # type: ignore
except ImportError:
    from websockets import connect as websockets_client_connect  # type: ignore


class SpeakClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSpeakClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._v1: typing.Optional[V1Client] = None

    @property
    def with_raw_response(self) -> RawSpeakClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSpeakClient
        """
        return self._raw_client

    @contextmanager
    def connect(
        self,
        *,
        encoding: typing.Optional[str] = None,
        mip_opt_out: typing.Optional[str] = None,
        model: typing.Optional[str] = None,
        sample_rate: typing.Optional[str] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[SpeakSocketClient]:
        """
        Convert text into natural-sounding speech using Deepgram's TTS WebSocket

        Parameters
        ----------
        encoding : typing.Optional[str]

        mip_opt_out : typing.Optional[str]

        model : typing.Optional[str]

        sample_rate : typing.Optional[str]

        authorization : typing.Optional[str]
            Use your API key for authentication, or alternatively generate a [temporary token](/guides/fundamentals/token-based-authentication) and pass it via the `token` query parameter.

            **Example:** `token %DEEPGRAM_API_KEY%` or `bearer %DEEPGRAM_TOKEN%`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SpeakSocketClient
        """
        ws_url = self._raw_client._client_wrapper.get_environment().production + "/v1/speak"
        query_params = httpx.QueryParams()
        if encoding is not None:
            query_params = query_params.add("encoding", encoding)
        if mip_opt_out is not None:
            query_params = query_params.add("mip_opt_out", mip_opt_out)
        if model is not None:
            query_params = query_params.add("model", model)
        if sample_rate is not None:
            query_params = query_params.add("sample_rate", sample_rate)
        ws_url = ws_url + f"?{query_params}"
        headers = self._raw_client._client_wrapper.get_headers()
        if authorization is not None:
            headers["Authorization"] = str(authorization)
        if request_options and "additional_headers" in request_options:
            headers.update(request_options["additional_headers"])
        try:
            with websockets_sync_client.connect(ws_url, additional_headers=headers) as protocol:
                yield SpeakSocketClient(websocket=protocol)
        except websockets.exceptions.InvalidStatusCode as exc:
            status_code: int = exc.status_code
            if status_code == 401:
                raise ApiError(
                    status_code=status_code,
                    headers=dict(headers),
                    body="Websocket initialized with invalid credentials.",
                )
            raise ApiError(
                status_code=status_code,
                headers=dict(headers),
                body="Unexpected error when initializing websocket connection.",
            )

    @property
    def v1(self):
        if self._v1 is None:
            from .v1.client import V1Client  # noqa: E402

            self._v1 = V1Client(client_wrapper=self._client_wrapper)
        return self._v1


class AsyncSpeakClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSpeakClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._v1: typing.Optional[AsyncV1Client] = None

    @property
    def with_raw_response(self) -> AsyncRawSpeakClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSpeakClient
        """
        return self._raw_client

    @asynccontextmanager
    async def connect(
        self,
        *,
        encoding: typing.Optional[str] = None,
        mip_opt_out: typing.Optional[str] = None,
        model: typing.Optional[str] = None,
        sample_rate: typing.Optional[str] = None,
        authorization: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[AsyncSpeakSocketClient]:
        """
        Convert text into natural-sounding speech using Deepgram's TTS WebSocket

        Parameters
        ----------
        encoding : typing.Optional[str]

        mip_opt_out : typing.Optional[str]

        model : typing.Optional[str]

        sample_rate : typing.Optional[str]

        authorization : typing.Optional[str]
            Use your API key for authentication, or alternatively generate a [temporary token](/guides/fundamentals/token-based-authentication) and pass it via the `token` query parameter.

            **Example:** `token %DEEPGRAM_API_KEY%` or `bearer %DEEPGRAM_TOKEN%`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncSpeakSocketClient
        """
        ws_url = self._raw_client._client_wrapper.get_environment().production + "/v1/speak"
        query_params = httpx.QueryParams()
        if encoding is not None:
            query_params = query_params.add("encoding", encoding)
        if mip_opt_out is not None:
            query_params = query_params.add("mip_opt_out", mip_opt_out)
        if model is not None:
            query_params = query_params.add("model", model)
        if sample_rate is not None:
            query_params = query_params.add("sample_rate", sample_rate)
        ws_url = ws_url + f"?{query_params}"
        headers = self._raw_client._client_wrapper.get_headers()
        if authorization is not None:
            headers["Authorization"] = str(authorization)
        if request_options and "additional_headers" in request_options:
            headers.update(request_options["additional_headers"])
        try:
            async with websockets_client_connect(ws_url, extra_headers=headers) as protocol:
                yield AsyncSpeakSocketClient(websocket=protocol)
        except websockets.exceptions.InvalidStatusCode as exc:
            status_code: int = exc.status_code
            if status_code == 401:
                raise ApiError(
                    status_code=status_code,
                    headers=dict(headers),
                    body="Websocket initialized with invalid credentials.",
                )
            raise ApiError(
                status_code=status_code,
                headers=dict(headers),
                body="Unexpected error when initializing websocket connection.",
            )

    @property
    def v1(self):
        if self._v1 is None:
            from .v1.client import AsyncV1Client  # noqa: E402

            self._v1 = AsyncV1Client(client_wrapper=self._client_wrapper)
        return self._v1
