# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .listen_v1response_results_channels_item_alternatives_item import (
    ListenV1ResponseResultsChannelsItemAlternativesItem,
)
from .listen_v1response_results_channels_item_search_item import ListenV1ResponseResultsChannelsItemSearchItem


class ListenV1ResponseResultsChannelsItem(UniversalBaseModel):
    search: typing.Optional[typing.List[ListenV1ResponseResultsChannelsItemSearchItem]] = None
    alternatives: typing.Optional[typing.List[ListenV1ResponseResultsChannelsItemAlternativesItem]] = None
    detected_language: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
