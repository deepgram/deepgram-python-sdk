# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .usage_breakdown_v1response_results_item_grouping import UsageBreakdownV1ResponseResultsItemGrouping


class UsageBreakdownV1ResponseResultsItem(UniversalBaseModel):
    hours: float = pydantic.Field()
    """
    Audio hours processed
    """

    total_hours: float = pydantic.Field()
    """
    Total hours including all processing
    """

    agent_hours: float = pydantic.Field()
    """
    Agent hours used
    """

    tokens_in: float = pydantic.Field()
    """
    Number of input tokens
    """

    tokens_out: float = pydantic.Field()
    """
    Number of output tokens
    """

    tts_characters: float = pydantic.Field()
    """
    Number of text-to-speech characters processed
    """

    requests: float = pydantic.Field()
    """
    Number of requests
    """

    grouping: UsageBreakdownV1ResponseResultsItemGrouping

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
