# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .listen_v1response_results_channels_item_alternatives_item_paragraphs import (
    ListenV1ResponseResultsChannelsItemAlternativesItemParagraphs,
)
from .listen_v1response_results_channels_item_alternatives_item_summaries_item import (
    ListenV1ResponseResultsChannelsItemAlternativesItemSummariesItem,
)
from .listen_v1response_results_channels_item_alternatives_item_topics_item import (
    ListenV1ResponseResultsChannelsItemAlternativesItemTopicsItem,
)
from .listen_v1response_results_channels_item_alternatives_item_words_item import (
    ListenV1ResponseResultsChannelsItemAlternativesItemWordsItem,
)


class ListenV1ResponseResultsChannelsItemAlternativesItem(UniversalBaseModel):
    transcript: typing.Optional[str] = None
    confidence: typing.Optional[float] = None
    words: typing.Optional[typing.List[ListenV1ResponseResultsChannelsItemAlternativesItemWordsItem]] = None
    paragraphs: typing.Optional[ListenV1ResponseResultsChannelsItemAlternativesItemParagraphs] = None
    summaries: typing.Optional[typing.List[ListenV1ResponseResultsChannelsItemAlternativesItemSummariesItem]] = None
    topics: typing.Optional[typing.List[ListenV1ResponseResultsChannelsItemAlternativesItemTopicsItem]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
