# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .agent_v1update_speak_speak_provider_aws_polly_credentials import (
    AgentV1UpdateSpeakSpeakProviderAwsPollyCredentials,
)
from .agent_v1update_speak_speak_provider_aws_polly_engine import AgentV1UpdateSpeakSpeakProviderAwsPollyEngine
from .agent_v1update_speak_speak_provider_aws_polly_voice import AgentV1UpdateSpeakSpeakProviderAwsPollyVoice
from .agent_v1update_speak_speak_provider_cartesia_model_id import AgentV1UpdateSpeakSpeakProviderCartesiaModelId
from .agent_v1update_speak_speak_provider_cartesia_voice import AgentV1UpdateSpeakSpeakProviderCartesiaVoice
from .agent_v1update_speak_speak_provider_deepgram_model import AgentV1UpdateSpeakSpeakProviderDeepgramModel
from .agent_v1update_speak_speak_provider_eleven_labs_model_id import AgentV1UpdateSpeakSpeakProviderElevenLabsModelId
from .agent_v1update_speak_speak_provider_open_ai_model import AgentV1UpdateSpeakSpeakProviderOpenAiModel
from .agent_v1update_speak_speak_provider_open_ai_voice import AgentV1UpdateSpeakSpeakProviderOpenAiVoice


class AgentV1UpdateSpeakSpeakProvider_Deepgram(UniversalBaseModel):
    type: typing.Literal["deepgram"] = "deepgram"
    model: AgentV1UpdateSpeakSpeakProviderDeepgramModel

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AgentV1UpdateSpeakSpeakProvider_ElevenLabs(UniversalBaseModel):
    type: typing.Literal["eleven_labs"] = "eleven_labs"
    model_id: AgentV1UpdateSpeakSpeakProviderElevenLabsModelId
    language_code: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AgentV1UpdateSpeakSpeakProvider_Cartesia(UniversalBaseModel):
    type: typing.Literal["cartesia"] = "cartesia"
    model_id: AgentV1UpdateSpeakSpeakProviderCartesiaModelId
    voice: AgentV1UpdateSpeakSpeakProviderCartesiaVoice
    language: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AgentV1UpdateSpeakSpeakProvider_OpenAi(UniversalBaseModel):
    type: typing.Literal["open_ai"] = "open_ai"
    model: AgentV1UpdateSpeakSpeakProviderOpenAiModel
    voice: AgentV1UpdateSpeakSpeakProviderOpenAiVoice

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AgentV1UpdateSpeakSpeakProvider_AwsPolly(UniversalBaseModel):
    type: typing.Literal["aws_polly"] = "aws_polly"
    voice: AgentV1UpdateSpeakSpeakProviderAwsPollyVoice
    language_code: str
    engine: AgentV1UpdateSpeakSpeakProviderAwsPollyEngine
    credentials: AgentV1UpdateSpeakSpeakProviderAwsPollyCredentials

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


AgentV1UpdateSpeakSpeakProvider = typing.Union[
    AgentV1UpdateSpeakSpeakProvider_Deepgram,
    AgentV1UpdateSpeakSpeakProvider_ElevenLabs,
    AgentV1UpdateSpeakSpeakProvider_Cartesia,
    AgentV1UpdateSpeakSpeakProvider_OpenAi,
    AgentV1UpdateSpeakSpeakProvider_AwsPolly,
]
