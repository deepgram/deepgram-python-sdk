# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .media_transcribe_request_callback_method import MediaTranscribeRequestCallbackMethod
    from .media_transcribe_request_custom_intent_mode import MediaTranscribeRequestCustomIntentMode
    from .media_transcribe_request_custom_topic_mode import MediaTranscribeRequestCustomTopicMode
    from .media_transcribe_request_encoding import MediaTranscribeRequestEncoding
    from .media_transcribe_request_model import MediaTranscribeRequestModel
    from .media_transcribe_request_summarize import MediaTranscribeRequestSummarize
    from .media_transcribe_request_version import MediaTranscribeRequestVersion
    from .media_transcribe_response import MediaTranscribeResponse
_dynamic_imports: typing.Dict[str, str] = {
    "MediaTranscribeRequestCallbackMethod": ".media_transcribe_request_callback_method",
    "MediaTranscribeRequestCustomIntentMode": ".media_transcribe_request_custom_intent_mode",
    "MediaTranscribeRequestCustomTopicMode": ".media_transcribe_request_custom_topic_mode",
    "MediaTranscribeRequestEncoding": ".media_transcribe_request_encoding",
    "MediaTranscribeRequestModel": ".media_transcribe_request_model",
    "MediaTranscribeRequestSummarize": ".media_transcribe_request_summarize",
    "MediaTranscribeRequestVersion": ".media_transcribe_request_version",
    "MediaTranscribeResponse": ".media_transcribe_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "MediaTranscribeRequestCallbackMethod",
    "MediaTranscribeRequestCustomIntentMode",
    "MediaTranscribeRequestCustomTopicMode",
    "MediaTranscribeRequestEncoding",
    "MediaTranscribeRequestModel",
    "MediaTranscribeRequestSummarize",
    "MediaTranscribeRequestVersion",
    "MediaTranscribeResponse",
]
